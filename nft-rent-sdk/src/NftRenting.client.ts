/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {} from "./types";
import {Addr, InstantiateMsg, ExecuteMsg, Binary, Uint128, Cw721ReceiveMsg, QueryMsg, ContractInfoResponse, LendOrderResponse, Expiration, Timestamp, Uint64, RentOrderResponse} from "./NftRenting.types";
export interface NftRentingReadOnlyInterface {
  contractAddress: string;
  contractInfo: () => Promise<ContractInfoResponse>;
  lendOrder: ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }) => Promise<LendOrderResponse>;
  rentOrder: ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }) => Promise<RentOrderResponse>;
}
export class NftRentingQueryClient implements NftRentingReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.contractInfo = this.contractInfo.bind(this);
    this.lendOrder = this.lendOrder.bind(this);
    this.rentOrder = this.rentOrder.bind(this);
  }

  contractInfo = async (): Promise<ContractInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  lendOrder = async ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }): Promise<LendOrderResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lend_order: {
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    });
  };
  rentOrder = async ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }): Promise<RentOrderResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      rent_order: {
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    });
  };
}
export interface NftRentingInterface extends NftRentingReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  rentNft: ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  editLendingOrder: ({
    cw721Contract,
    lendAmount,
    lendTime,
    tokenId
  }: {
    cw721Contract: string;
    lendAmount: Uint128;
    lendTime: number;
    tokenId: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  delistNft: ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftRentingClient extends NftRentingQueryClient implements NftRentingInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveNft = this.receiveNft.bind(this);
    this.rentNft = this.rentNft.bind(this);
    this.editLendingOrder = this.editLendingOrder.bind(this);
    this.delistNft = this.delistNft.bind(this);
  }

  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, _fee, _memo, _funds);
  };
  rentNft = async ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      rent_nft: {
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    }, _fee, _memo, _funds);
  };
  editLendingOrder = async ({
    cw721Contract,
    lendAmount,
    lendTime,
    tokenId
  }: {
    cw721Contract: string;
    lendAmount: Uint128;
    lendTime: number;
    tokenId: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      edit_lending_order: {
        cw721_contract: cw721Contract,
        lend_amount: lendAmount,
        lend_time: lendTime,
        token_id: tokenId
      }
    }, _fee, _memo, _funds);
  };
  delistNft = async ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delist_nft: {
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    }, _fee, _memo, _funds);
  };
}